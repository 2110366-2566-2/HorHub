generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  role        Role
  firstName   String
  lastName    String
  displayName String
  gender      Gender
  birthdate   DateTime
  phoneNumber String
  isVerified  Boolean   @default(false)
  imageURL    String    @default("https://utfs.io/f/4a65c7f9-7bb1-4498-99bb-4148be482108-t9vzc5.png")
  paymentMethods  PaymentMethod[]   @relation("ownPaymentMethod")
  dorms       Dorm[]   @relation("ownDorm")
  payments    Payment[]   @relation("makePayment")
  bookings    Booking[]   @relation("makeReserve")
}

model PaymentMethod {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation("ownPaymentMethod", fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  type        PaymentMethodType
  info        String
}

model Dorm {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  provider    User      @relation("ownDorm", fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String    @db.ObjectId
  address     String
  latitude    Float
  longitude   Float
  phoneNumber String
  rooms       Room[]    @relation("roomInDorm")
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  size        String
  cost        Float
  dorm        Dorm      @relation("roomInDorm", fields: [dormId], references: [id], onDelete: Cascade)
  dormId      String    @db.ObjectId
  bookings    Booking[] @relation("reserveAt")
}

model Booking {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  customer    User      @relation("makeReserve", fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String    @db.ObjectId
  room        Room      @relation("reserveAt", fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String    @db.ObjectId
  payment     Payment?  @relation("bookingPayment", fields: [paymentId], references: [id])
  paymentId   String?   @db.ObjectId @unique
  status      String
  bookAt      DateTime  @default(now())
}

model Payment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation("makePayment", fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  booking     Booking?  @relation("bookingPayment")
  cost        Float
  payAt       DateTime  @default(now())
}





enum PaymentMethodType {
  Bank
  Card
}

enum Gender {
  Male
  Female
  Other
}

enum Role {
  Customer
  Provider
}